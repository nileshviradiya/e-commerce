version: '3.8'

services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "5000:5000" # Exposes backend on host port 5000, mapping to container port 5000
    depends_on:
      - mongo # Ensures mongo starts before backend
    environment:
      # Pass environment variables to the backend container
      # These should ideally match your backend/.env file for local dev consistency
      # For production, these would be set securely (e.g., via secrets management)
      PORT: 5000
      MONGODB_URI: mongodb://mongo:27017/ecommerceDB # Connects to mongo service on default port
      NODE_ENV: development # Or 'production' if building a production image
      JWT_SECRET: yourSuperSecretKeyGoesHereReplaceThisBeforeDeploymentInProd
      JWT_EXPIRES_IN: 1h
      # Add other backend environment variables as needed
    volumes:
      - ./backend:/usr/src/app # Mounts local backend code into container for live reload (dev only)
      - /usr/src/app/node_modules # Anonymous volume to prevent local node_modules from overwriting container's
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      # You can pass build arguments to Dockerfile here if needed
      # args:
      #   REACT_APP_API_URL: http://localhost:5000/api 
    ports:
      - "3000:80" # Exposes frontend Nginx on host port 3000, mapping to container port 80
    depends_on:
      - backend # Ensures backend is available (though Nginx will retry)
    # environment: # Nginx typically doesn't need many env vars unless your entrypoint script uses them
      # NGINX_HOST: localhost
      # NGINX_PORT: 80
    volumes:
      - ./frontend/nginx.conf:/etc/nginx/conf.d/default.conf:ro # Mount custom Nginx config read-only
      # For development with live reload on frontend, you might need a different Dockerfile setup
      # or use CRA's dev server proxied by Nginx, which is more complex.
      # The current frontend Dockerfile is optimized for a production build.
      # If you want live reload for frontend in Docker, you'd typically:
      # 1. Mount the src directory: `- ./frontend/src:/app/src`
      # 2. Run `npm start` in the CMD of the frontend Dockerfile (dev stage)
      # 3. Ensure the dev server is exposed and Nginx proxies to it.
      # For simplicity, this docker-compose assumes you run frontend dev server locally
      # and this frontend service is for a built version.
      # To serve a CRA dev server through Nginx in Docker, an alternative Dockerfile setup is needed.
    restart: unless-stopped

  mongo:
    image: mongo:latest # Use official MongoDB image
    ports:
      - "27017:27017" # Exposes MongoDB on default port
    volumes:
      - mongo-data:/data/db # Persists MongoDB data using a named volume
    restart: unless-stopped

volumes:
  mongo-data: # Defines the named volume for MongoDB data persistence

# Note on environment variables for frontend:
# If your React app needs runtime environment variables (e.g. REACT_APP_API_URL),
# the Nginx setup needs a way to pass them to the static files.
# This often involves a script that replaces placeholders in JS files when the container starts,
# or using a file that Nginx serves which your JS then fetches.
# The current setup assumes build-time variables are sufficient or API URL is fixed/proxied.
# For `REACT_APP_API_URL=http://localhost:5000/api` when running Docker Compose,
# the React app (served by Nginx on port 3000) can directly call `http://localhost:5000/api`
# because both backend (5000) and frontend (3000) ports are mapped to the host.
# If frontend was calling backend service name directly (e.g. `http://backend:5000/api`),
# that would only work if they are on the same Docker network and the call is made server-side
# or via an Nginx proxy pass rule from frontend container to backend container.
# For client-side calls from browser, `localhost:5000` is correct here.
# Ensure REACT_APP_API_URL in frontend/.env is set to http://localhost:5000/api for local `npm start`
# and for Dockerized version, if not using build-time args, ensure it can reach the backend.
# A common pattern is to have Nginx proxy API calls to the backend service.
# Example nginx.conf addition for proxy:
# location /api {
#   proxy_pass http://backend:5000; # 'backend' is the service name in docker-compose
#   proxy_set_header Host $host;
#   proxy_set_header X-Real-IP $remote_addr;
#   proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
# }
# Then React app calls /api/... which Nginx forwards. This avoids CORS issues too.
# The current frontend nginx.conf does NOT include this proxy. It assumes direct calls or CORS is handled.
